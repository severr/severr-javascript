/**
 * Severr Client API
 * Get your application events and errors to Severr via the *Severr API*.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['./generated/src/severr/index', 'stacktrace-js'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('./generated/src/severr/index'), require('stacktrace-js'), require('error-stack-parser'));
    }
}(function(SeverrApi, StackTrace, ErrorStackParser) {
    'use strict';

    /**
     * Create a SeverrClient instance
     *
     * @param apiKey API Key for the application
     * @param url (optional) URL to Severr, specify null to use default
     * @param contextAppVersion (optional) application version, defaults to 1.0
     * @param contextEnvName (optional) environment name like "development", "staging", "production" or a custom string
     * @param contextEnvVersion (optional) environment version
     * @param contextEnvHostname (optional) environment hostname, defaults to hostname
     * @param contextAppOS (optional) Operating system
     * @param contextAppOSVersion (optional)  Operating system version
     * @param contextAppBrowser (optional) Browser name
     * @param contextAppBrowserVersion (optional) Browser version
     * @param contextDataCenter (optional) Data center
     * @param contextDataCenterRegion (optional) Data center region
     *
     * @module index
     * @version 1.0.0
     */
    var exports = function SeverrClient(apiKey,
                           url,
                           contextAppVersion,
                           contextEnvName,
                           contextEnvVersion,
                           contextEnvHostname,
                           contextAppOS,
                           contextAppOSVersion,
                           contextAppBrowser,
                           contextAppBrowserVersion,
                           contextDataCenter,
                           contextDataCenterRegion) {
        var _this = this;

        _this.apiKey = apiKey;
        _this.url = url;
        _this.contextAppVersion = contextAppVersion ? contextAppVersion : '1.0';
        _this.contextEnvName = contextEnvName ? contextEnvName : 'development';

        _this.contextEnvVersion = contextEnvVersion;
        _this.contextEnvHostname = contextEnvHostname;
        _this.contextAppOS = contextAppOS;
        _this.contextAppOSVersion = contextAppOSVersion;
        _this.contextAppBrowser = contextAppBrowser;
        _this.contextAppBrowserVersion = contextAppBrowserVersion;
        _this.contextDataCenter = contextDataCenter;
        _this.contextDataCenterRegion = contextDataCenterRegion;

        if(typeof navigator !== 'undefined') {
            if(!_this.contextAppOS) _this.contextAppOS = navigator.platform;
            if(!_this.contextAppOSVersion) _this.contextAppOSVersion = navigator.oscpu;
            if(!_this.contextAppBrowser) _this.contextAppBrowser = navigator.appCodeName;
            if(!_this.contextAppBrowserVersion) _this.contextAppBrowserVersion = navigator.appVersion;
        } else {
            try {
                var os = require('os');

                if(typeof os !== 'undefined') {
                    if(!_this.contextAppOS) _this.contextAppOS = os.platform();
                    if(!_this.contextAppOSVersion) _this.contextAppOSVersion = os.release();
                    if(!_this.contextEnvHostname) _this.contextEnvHostname = os.hostname();
                }
            } catch(err) {

            }
        }

        var apiClient = new SeverrApi.ApiClient();
        if(url) {
            apiClient.basePath = url;
        }
        _this.eventsApi = new SeverrApi.EventsApi(apiClient);

        function fillDefaults(appEvent) {
            if (typeof appEvent.apiKey === 'undefined') appEvent.apiKey = _this.apiKey;

            if (typeof appEvent.contextAppVersion  === 'undefined') appEvent.contextAppVersion = _this.contextAppVersion;

            if (typeof appEvent.contextEnvName === 'undefined') appEvent.contextEnvName = _this.contextEnvName;
            if (typeof appEvent.contextEnvVersion  === 'undefined') appEvent.contextEnvVersion = _this.contextEnvVersion;
            if (typeof appEvent.contextEnvHostname === 'undefined') appEvent.contextEnvHostname = _this.contextEnvHostname;

            if (typeof appEvent.contextAppOS === 'undefined')
            {
                appEvent.contextAppOS = _this.contextAppOS;
                appEvent.contextAppOSVersion = _this.contextAppOSVersion;
            }

            if (typeof appEvent.contextDataCenter === 'undefined') appEvent.contextDataCenter = _this.contextDataCenter;
            if (typeof appEvent.contextDataCenterRegion  === 'undefined') appEvent.contextDataCenterRegion = _this.contextDataCenterRegion;

            if (typeof appEvent.eventTime === 'undefined') appEvent.eventTime = (new Date()).getTime();
            return appEvent;
        }

        function fillStacktrace(error, stackFrames) {
            var type = (typeof error === 'object') ? error.constructor.name : (typeof error).toString();

            var newEvent = _this.createAppEvent("Error", type, error.toString());
            newEvent.eventStacktrace = new SeverrApi.Stacktrace();

            var innerTrace = new SeverrApi.InnerStackTrace();
            innerTrace.type = type;
            innerTrace.message = error instanceof Error ? error.message : error.toString();
            innerTrace.traceLines = new SeverrApi.StackTraceLines();

            for(var i in stackFrames) {
                var traceLine = new SeverrApi.StackTraceLine();
                traceLine.function = stackFrames[i].functionName;
                traceLine.file = stackFrames[i].fileName;
                traceLine.line = stackFrames[i].lineNumber + ":" + stackFrames[i].columnNumber;
                Array.prototype.push.call(innerTrace.traceLines, traceLine);
            }

            Array.prototype.push.call(newEvent.eventStacktrace, innerTrace);
            return newEvent;
        }

        function sendEventFromError(err, shouldDie) {
            StackTrace
                .fromError(err)
                .then(function(stackFrames) {
                    var newEvent = fillStacktrace(err, stackFrames);
                    _this.sendEvent(newEvent, function(error, data, response) {
                        if(error) {
                            console.error('Error Response: ' + error + ', data = ' + data + ', response = ' + JSON.stringify(response));
                        } else {
                            console.log('Response: data = ' + data + ', response = ' + JSON.stringify(response));
                        }
                        if (shouldDie) {
                            process.exit(1);
                        }
                    });
                })
                .catch(function(err) {
                    console.error("Error: "+ err);
                    if (shouldDie) {
                        process.exit(1);
                    }
                });
        }

        /**
         * Setup global exception handling
         *
         * @param shouldDie should the process exit on error (applicable to node or other environments, ignored if in browser)
         */
        SeverrClient.prototype.handleExceptions = function(shouldDie) {
            var _this = this;

            if(typeof window !== 'undefined') {
                window.onerror = function(msg, file, line, col, error) {
                    sendEventFromError(error, false);
                }
            } else if(typeof process !== 'undefined') {
                shouldDie = (typeof shouldDie === 'undefined') ? true : shouldDie;
                process.on('uncaughtException', function(err) {
                    sendEventFromError(err, shouldDie);
                });
            }
        };


        /**
         * Constructs a new {model:AppEvent}
         * 
         * @param classification classification like "Error", "Debug", "Warning" or "Info" or a custom string
         * @param eventType event type
         * @param eventMessage event message
         * @returns app event
         */
        SeverrClient.prototype.createAppEvent = function(classification, eventType, eventMessage) {
            var _this = this;

            if(!classification) classification = "Error";
            if(!eventType) eventType = 'unknown';
            if(!eventMessage) eventMessage = 'unknown';

            return fillDefaults(new SeverrApi.AppEvent(_this.apiKey, classification, eventType, eventMessage));
        };

        /**
         * Send event to Severr
         *
         * @param appEvent the event to send constructed using {createAppEvent}
         * @param callback the callback accepting the following parameters: error, data, response
         */
        SeverrClient.prototype.sendEvent = function(appEvent, callback) {
            var _this = this;

            return _this.eventsApi.eventsPost(fillDefaults(appEvent), callback);
        };
    };

    return exports;
}));
